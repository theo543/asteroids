cmake_minimum_required(VERSION 3.24)

IF(NOT DEFINED EMBED_SUBPROCESS)
    # NOTE: update executable name in .github/workflows/cmake.yml:25 when changing executable name in this file
    # for now, the project name is used as the executable name
    project(oop)

    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
    set(CMAKE_CXX_EXTENSIONS OFF)
    set(CMAKE_CXX_VISIBILITY_PRESET hidden) # fixes macOS warnings about translation units having different visibility settings

    option(WARNINGS_AS_ERRORS "Treat warnings as errors" OFF)

    # disable sanitizers when releasing executables without explicitly requested debug info
    # use generator expressions to set flags correctly in both single and multi config generators
    set(is_debug "$<CONFIG:Debug>")
    set(is_rel_with_deb "$<CONFIG:RelWithDebInfo>")
    set(debug_mode "$<OR:${is_debug},${is_rel_with_deb}>")
ENDIF()

###############################################################################

# custom functions

function(generate_resources)
    IF(NOT DEFINED OUTPUT_FILE)
        message(FATAL_ERROR "OUTPUT_FILE variable must be defined")
    ENDIF()

    IF(NOT DEFINED HEADER_FILE)
        message(FATAL_ERROR "HEADER_FILE variable must be defined")
    ENDIF()

    IF(NOT DEFINED RESOURCE_FOLDER)
        message(FATAL_ERROR "RESOURCE_FOLDER variable must be defined")
    ENDIF()

    list(APPEND RESOURCES
        "${RESOURCE_FOLDER}/public-pixel-font/PublicPixel-z84yD.ttf PublicPixelTTF"
        "${RESOURCE_FOLDER}/piano-loop/683841__josefpres__piano-loops-094-octave-long-loop-120-bpm.ogg TestSoundOGG"
    )

    file(WRITE ${OUTPUT_FILE} "#include <span>\n")
    file(WRITE ${HEADER_FILE} "#ifndef RESOURCES_H\n#define RESOURCES_H\n#include <span>\n")
    file(APPEND ${HEADER_FILE} "// DO NOT EDIT - AUTOGENERATED FORWARD DECLARATION FOR EMBEDDED RESOURCES\n")

    foreach(RESOURCE ${RESOURCES})
        string(REGEX MATCH "^([^ ]+)" filename ${RESOURCE})
        string(REGEX MATCH "([^ ]+)$" varname ${RESOURCE})
        message(STATUS "Generating variable ${varname} from file ${filename}")
        set(file "${filename}")
        file(READ ${file} filedata HEX)
        string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata_formatted ${filedata})
        file(APPEND ${OUTPUT_FILE} "const static unsigned char ${varname}_ARRAY[] = {${filedata_formatted}};\n")
        # Declared extern "C" to make clang-tidy stop saying it's uninitialized
        file(APPEND ${OUTPUT_FILE} "extern \"C\" const std::span<const unsigned char> ${varname}(${varname}_ARRAY, ${varname}_ARRAY + sizeof(${varname}_ARRAY));\n")
        file(APPEND ${HEADER_FILE} "extern \"C\" const std::span<const unsigned char> ${varname};\n")
    endforeach()

    file(APPEND ${HEADER_FILE} "#endif\n")
endfunction()

IF(EMBED_SUBPROCESS)
    generate_resources()
    return()
endif()

function(set_custom_stdlib_and_sanitizers target add_apple_asan)
    if(MSVC)
        target_compile_options(${target} PRIVATE "$<${debug_mode}:/fsanitize=address>")
        return()
    endif()

    if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" AND NOT WIN32) # on Windows <iostream> is not found when using libc++
        message(STATUS "Using Clang's libc++ for target ${target} - this should not happen on Windows")
        target_compile_options(${target} PRIVATE -stdlib=libc++)
        target_link_options(${target} PRIVATE -stdlib=libc++)
    endif()

    if(APPLE)
        # first check Apple since Apple is also a kind of Unix
        if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" AND add_apple_asan MATCHES true)
            target_compile_options(${target} PRIVATE "$<${debug_mode}:-fsanitize=address,undefined>")
            target_link_options(${target} PRIVATE "$<${debug_mode}:-fsanitize=address,undefined>")
        endif()
    elseif(UNIX)
        if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
            if("${CMAKE_CXX_COMPILER_VERSION}" MATCHES "12.")
                # check leaks on Linux since macOS does not support the leaks sanitizer yet
                # leaks sanitizer is enabled by default on Linux, so we do not need to enable it explicitly
                target_compile_options(${target} PRIVATE "$<${debug_mode}:-fsanitize=address,undefined>")
                target_link_options(${target} PRIVATE "$<${debug_mode}:-fsanitize=address,undefined>")
            elseif("${CMAKE_CXX_COMPILER_VERSION}" MATCHES "13.")
                # use semi-colons instead of spaces to separate arguments
                # it is recommended to quote generator expressions in order to avoid unintentional splitting
                target_compile_options(${target} PRIVATE "$<${debug_mode}:-fsanitize=memory,undefined;-fsanitize-recover=memory,undefined;-fsanitize-memory-track-origins>")
                target_link_options(${target} PRIVATE "$<${debug_mode}:-fsanitize=memory,undefined;-fsanitize-recover=memory,undefined;-fsanitize-memory-track-origins;-Wl,-rpath,tools/llvm-project/build/lib>")
            else()
                message("No matching Clang version to add sanitizer flags!")
            endif()
        endif()
    endif()
endfunction()

###############################################################################

# external dependencies with FetchContent
include(FetchContent)

set(BUILD_SHARED_LIBS FALSE)

# NOTE: Also update SFML_VERSION env var in .github/workflows/cmake.yml:122
FetchContent_Declare(
  SFML
  GIT_REPOSITORY https://github.com/SFML/SFML.git
  GIT_TAG        863fef024619da7f59b6404087b454337a172ac1 # 2.6.x as of 2022-08-30
  # GIT_TAG        72d88033e2f24be0fb1e9df614a56f3d5274154c # master as of 2022-08-30
  # GIT_TAG        f7c88ee7ef4e1c705531cd614efb7dcff1f873cb # last commit merged in master before API breakage (2022-04-21)
  # GIT_TAG        origin/master
  # GIT_TAG        origin/2.6.x
  # GIT_SHALLOW    1  # works only with branches or tags, not with arbitrary commit hashes
)


FetchContent_MakeAvailable(SFML)

set_custom_stdlib_and_sanitizers(sfml-system false)
set_custom_stdlib_and_sanitizers(sfml-window false)
set_custom_stdlib_and_sanitizers(sfml-graphics false)
set_custom_stdlib_and_sanitizers(sfml-audio false)

###############################################################################

FetchContent_Declare(
        fmt
        GIT_REPOSITORY https://github.com/fmtlib/fmt.git
        GIT_TAG        a33701196adfad74917046096bf5a2aa0ab0bb50 # 9.1.0
)

FetchContent_MakeAvailable(fmt)

set_custom_stdlib_and_sanitizers(fmt false)

###############################################################################

# Header-only library
FetchContent_Declare(
        atomic_queue
        GIT_REPOSITORY https://github.com/max0x7ba/atomic_queue.git
        GIT_TAG        681544fd62c0b953a33d30bcfb1a15b9eb7da64b # 1.4
)

FetchContent_MakeAvailable(atomic_queue)

###############################################################################

FetchContent_Declare(
        cs_libguarded
        GIT_REPOSITORY https://github.com/copperspice/cs_libguarded.git
        GIT_TAG        2b0fc6537011b9f3a4b296170bdecbd28a270aa2 # 1.4.0
)

FetchContent_Populate(cs_libguarded) # This lib's CMakeLists.txt is used for testing and not for building the library

###############################################################################

# external dependencies with find_package

find_package(Threads REQUIRED)
if(APPLE)
elseif(UNIX)
    find_package(X11)
endif()

###############################################################################

# NOTE: update executable name in .github/workflows/cmake.yml:25 when changing name here
add_executable(${PROJECT_NAME}
        src/main/main.cpp
        src/main/MainLoop.h src/main/MainLoop.cpp
        src/main/Menu.h src/main/Menu.cpp
        src/menu/UI.h src/menu/UI.cpp
        src/menu/UIItem.h src/menu/UIItem.cpp
        src/menu/UILabel.h src/menu/UILabel.cpp
        src/menu/UIOption.h src/menu/UIOption.cpp
        src/utility/Defer.h
        src/world/SwitchFactory.h src/world/SwitchFactory.tpp
        src/world/WorldInterface.h src/world/WorldInterface.cpp
        src/world/WorldBase.h src/world/WorldBase.cpp
        src/basic_test/TimerTest.h src/basic_test/TimerTest.cpp
        src/bounce_test/BounceTest.h src/bounce_test/BounceTest.cpp
        src/bounce_test/Bouncy.cpp src/bounce_test/Bouncy.h
        src/menu/Stats.h src/menu/Stats.cpp
        src/physics/GameObject.cpp src/physics/GameObject.h
        src/physics/Physics.cpp src/physics/Physics.h
        src/bounce_test/Player.cpp src/bounce_test/Player.h)
# header base path to prevent '..' in #include statements
target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/src/")

###############################################################################

file(GLOB_RECURSE RESOURCE_FILES CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/resources/*")

add_custom_command(
        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/embedded_resources.cpp ${CMAKE_CURRENT_SOURCE_DIR}/embedded_fwd.h
        COMMAND ${CMAKE_COMMAND}
        -D"EMBED_SUBPROCESS=1"
        -D"OUTPUT_FILE=${CMAKE_CURRENT_BINARY_DIR}/embedded_resources.cpp"
        -D"HEADER_FILE=${CMAKE_CURRENT_SOURCE_DIR}/embedded_fwd.h"
        -D"RESOURCE_FOLDER=${CMAKE_CURRENT_SOURCE_DIR}/resources"
        -P"${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt"
        DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt" "${RESOURCE_FILES}"
)

if(GITHUB_ACTIONS)
    set(OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/embedded_resources.cpp)
    set(HEADER_FILE ${CMAKE_CURRENT_SOURCE_DIR}/embedded_fwd.h)
    set(RESOURCE_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/resources)
    generate_resources()
endif()

target_sources(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/embedded_resources.cpp ${CMAKE_CURRENT_SOURCE_DIR}/embedded_fwd.h)

###############################################################################

# target definitions

if(GITHUB_ACTIONS)
  message("NOTE: GITHUB_ACTIONS defined")
  target_compile_definitions(${PROJECT_NAME} PRIVATE GITHUB_ACTIONS)
endif()

###############################################################################

if(WARNINGS_AS_ERRORS)
    set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_WARNING_AS_ERROR ON)
endif()

# custom compiler flags
message("Compiler: ${CMAKE_CXX_COMPILER_ID} version ${CMAKE_CXX_COMPILER_VERSION}")
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4 /permissive- /wd4244 /wd4267 /wd4996 /external:anglebrackets /external:W0)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -pedantic)
endif()

###############################################################################

# sanitizers
set_custom_stdlib_and_sanitizers(${PROJECT_NAME} true)

###############################################################################

# use SYSTEM so clang-tidy does not report warnings from these directories
#target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ext/<SomeHppLib>/include)
target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${SFML_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${fmt_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${atomic_queue_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${cs_libguarded_SOURCE_DIR}/src)
target_link_libraries(${PROJECT_NAME} PRIVATE sfml-graphics sfml-window sfml-system sfml-audio Threads::Threads)
target_link_libraries(${PROJECT_NAME} PRIVATE fmt::fmt)

if(APPLE)
elseif(UNIX)
    target_link_libraries(${PROJECT_NAME} PRIVATE X11)
endif()

###############################################################################

option(HIDE_TERMINAL_ON_RELEASE "Hide terminal when building a release on Windows" ON)

# if we're on Windows and building a release
if(WIN32 AND (CMAKE_BUILD_TYPE MATCHES ".*Rel.*") AND HIDE_TERMINAL_ON_RELEASE)
    message(STATUS "Setting PE subsystem property to GUI")
    # This sets the PE header subsystem property to GUI, hiding the terminal.
    set_target_properties(${PROJECT_NAME} PROPERTIES WIN32_EXECUTABLE TRUE)
    # On MSVC we have to tell the compiler we're still using main instead of WinMain.
    target_link_options(${PROJECT_NAME} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/ENTRY:mainCRTStartup>)
endif()

###############################################################################

# copy binaries to "bin" folder; these are uploaded as artifacts on each release
# update name in .github/workflows/cmake.yml:29 when changing "bin" name here
install(TARGETS ${PROJECT_NAME} DESTINATION bin)
# install(DIRECTORY some_dir1 some_dir2 DESTINATION bin)
# install(FILES some_file1.txt some_file2.md DESTINATION bin)
